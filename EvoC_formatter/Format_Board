#!/bin/expect

############################################################
# private proc
#
############################################################
proc get_cli_argument {search {var_ref ignore}} {
  upvar $var_ref variable2set
  set index [lsearch $::argv "$search"]
  if {$index!=-1} {
    incr index
    set variable2set [lindex $::argv $index ]
    return 1
  } else {
    return 0
  }
}

proc getBoardInfo { telnet_spawn_id smn apn } {

  #puts "getBoardInfo: ENTER $smn $apn"
	global timeout target_timeout dollar_prompt board_info
	global noboard_indicator
	set timeout_indicator "TIMEOUT99"

	#set spawn_id $telnet_spawn_id
	set result ""
	expect "*"

	set old_timeout $timeout
	set timeout $target_timeout

	
	if {[lsearch $board_info(node,smns) $smn] == -1} {
		lappend board_info(node,smns)  $smn
		set board_info(node,$smn,apns) ""
	}
	if {[lsearch $board_info(node,$smn,apns) $apn] == -1} {
		lappend board_info(node,$smn,apns) $apn
		set board_info(node,$smn,$apn)     ""
	}


	sleep 1
  set ret_val ok

	send -i $telnet_spawn_id "hwpid $smn $apn\r"
	
	expect {
		-i $telnet_spawn_id "Welcome to OSE" {
			send_user "ERROR : Restart message captured! Exiting!\n"
			exit -1
		}
		-i $telnet_spawn_id -re "Plug-in Unit Product Name: (\[^\r\]*)\r\n" {
			set board_info(node,$smn,$apn,name) [string trim $expect_out(1,string)]
      #send_user "\nGot 1'$expect_out(1,string)'\n"
      exp_continue
		}
		-i $telnet_spawn_id -re "Plug-in Unit Product No: (\[^\r\]*)\r\n" {
			set board_info(node,$smn,$apn,no) [string trim $expect_out(1,string)]
      #send_user "\nGot 2'$expect_out(1,string)'\n"
      exp_continue
		}
		-i $telnet_spawn_id -re "Plug-in Unit Product rev: (\[^\r\]*)\r\n" {
			set board_info(node,$smn,$apn,rev) [string trim $expect_out(1,string)]
      #send_user "\nGot 3'$expect_out(1,string)'\n"
      exp_continue
		}
		-i $telnet_spawn_id -re "Plug-in Unit Product Date: (\[^\r\]*)\r\n" {
			set board_info(node,$smn,$apn,date) [string trim $expect_out(1,string)]
      #send_user "\nGot 4'$expect_out(1,string)'"
      exp_continue
		}
		-i $telnet_spawn_id -re "Plug-in Unit Product Serial: (\[^\r\]*)\r\n" {
			set board_info(node,$smn,$apn,serial) [string trim $expect_out(1,string)]
      #send_user "\nGot 5'$expect_out(1,string)'\n"
			send_user "$board_info(node,$smn,$apn,name) $board_info(node,$smn,$apn,rev) found in $smn:$apn\n"
      set ret_val ok
      exp_continue
		}
		-i $telnet_spawn_id -re "Error in pid server" {
			set board_info(node,$smn,$apn,name) "No or wrong board"
			set board_info(node,$smn,$apn,no) "No or wrong board"
			set board_info(node,$smn,$apn,rev) "No or wrong board"
			set board_info(node,$smn,$apn,date) "No or wrong board"
			set board_info(node,$smn,$apn,serial) "No or wrong board"
			send_user "Board not found in $smn:$apn\n"
			set ret_val $noboard_indicator
      exp_continue
		}
		-i $telnet_spawn_id -re "Unknown command" {
			send_user "\n\nUnknown command.\n\n"
			exit -1
		}
    -i $telnet_spawn_id "$dollar_prompt" { 
      #puts "got prompt $smn:$apn"
    }
    -i $telnet_spawn_id timeout {
      send_error "Timeout while for waiting for 'hwpid $smn $apn'.\n"
      send_error "hwpid command does not work in forced backup, i.e. if core gpb has been restarted with reload --.\n"
      send_error "Turning control over 'telnet $::node_ip $::ip_port' to you.\n"
      interact
      exit -1
    }
	}
  return $ret_val
  #puts "getBoardInfo: RETURN"
}


############################################################
# format start here!
#
############################################################
############################################################
set dollar_prompt "\\$"
set sql_prompt "SQL>"
set timeout 20
set boards(node,rows) ""
set board_info(node,smns) ""
set target_timeout    20
set timeout_indicator "TIMEOUT99"
set error_indicator   "ERROR99"
set noboard_indicator "NOBOARD99"
set gpb 1
set nongpb 1

log_user 0

if { [get_cli_argument "-ip" node_ip]} {

} else {
    puts "Error! -ip is missing."
    exit -1
}

if { [get_cli_argument "-user" node_user]} {
    
} else {
    puts "Error! -user is missing."
    exit -1
}

if { [get_cli_argument "-pw" node_pw] } {
    
} else {
    puts "Error! -pw is missing."
    exit -1
}

if { [get_cli_argument "-gpb" node_gpb] } {
    set nongpb 0
}

if { [get_cli_argument "-nongpb" node_gpb] } {
    set gpb 0
}

#puts "$nongpb   $gpb"
spawn telnet $node_ip
set telnet_spawn_id spawn_id

sleep 2

# serial lines sometimes act as if you are logged in but when
# you send a command the username-prompt comes up.
# send userid first to see what happens.
#send "$node_user\r"
expect {
  -re "sername:" {
    send "$node_user\r"
    exp_continue
  }
  -re "assword:" {
    send "$node_pw\r"
    exp_continue
  }

  -re "$dollar_prompt" {
    puts "LOGIN: Connected to target via $node_ip !\n"
  }
  
  -re "ogin failed" {
    puts "Please check if you input the correct username and password !\n"
    exit -1
  }
  
  default {
    send "exit\r"
    puts "Warning: unexpected response from node; aborting...\n"
  }
}

send_user "Starting board scan.\n"

for {set apn 0} {$apn < 28} {incr apn} {
  getBoardInfo $telnet_spawn_id 0 $apn
}
#puts $board_info(node,0,0,name)


# Get slot for SCB/SXB board, used to calculate subrack SMN
set scb_number 0
set sxb_number 0
set scxb_apns ""

foreach apn $board_info(node,0,apns) {
  if {[string first "SCB" $board_info(node,0,$apn,name)] != -1} {
    incr scb_number
    if {$apn%2 == 0} {
      lappend scxb_apns $apn
    }
  }
  if {[string first "SXB" $board_info(node,0,$apn,name)] != -1} {
    incr sxb_number
    if {$apn%2 == 0} {
      lappend scxb_apns $apn
    }
  }
}
if {$scb_number == 0} {
  # CBU nodes do not have SCB-boards.
  # Ask the user what to do if no SCB-board was found.
  send_user "Warning! Did not find any SCB boards.\n Do you want to continue and save this scanning? "
  expect_user -re .*
  set timeout -1
  expect_user -re "(.*)\n"
  #send_user "out='$expect_out(1,string)'\n"
  if {[regexp -nocase -- "^y" $expect_out(1,string)]} {
    send_user "Continuing.\n"
    send_user "Scanning ready."
    writeHwDescFile
    return
  } else {
    send_user "Bye\n"
    exit -1
  }
}

#scanning the device subracks
send_user "\n\nCalculated subrack SMN that will be scanned:\n"
foreach scxb_apn $scxb_apns {
	for {set siliport 1} {$siliport < 5} {incr siliport} {
    set smn [expr ($scxb_apn/2)*8 + $siliport]
    send_user "$smn "
  }
} 
send_user "\n"

foreach scxb_apn $scxb_apns {
	for {set siliport 1} {$siliport < 5} {incr siliport} {
		set smn [expr ($scxb_apn/2)*8 + $siliport]

		set missing_scb_counter 0
		for {set apn 0} {$apn < 28} {incr apn} {
			set result [getBoardInfo $telnet_spawn_id $smn $apn]

			if {$result == $noboard_indicator && ($apn == 0 || $apn == 1)} {
				incr missing_scb_counter
				
			}

			if {$apn > 0 && $missing_scb_counter == 2} {
				send_user "There is no subrack on this SMN\n"
				break
			}
		}
    send_user "\n"
	}
}
send_user "Scanning Finish\r"

foreach smn_index $board_info(node,smns) {
   foreach apn_index $board_info(node,$smn_index,apns) {
      set lhsh_name [join [list [format "%02d" $smn_index] [format "%02d" $apn_index] [format "%02d" 0]] ""]
      if {[string first "GPB" $board_info(node,$smn_index,$apn_index,name)] != -1 } {
        if {$gpb == "1"} {
         set command1 "lhsh $lhsh_name formathd /d"
         set command2 "lhsh $lhsh_name formathd /c"
         send "$command1\r"
         expect {
            -re "formathd /d\r(.*)Continue"  {
      			send "y\r"
      			exp_continue
      		  }
      		  -re "Formatting Hard Disk(.*)$dollar_prompt" {
      			send_user "\t(ddrive_format) Formatting of /d successfully done for board : $board_info(node,$smn_index,$apn_index,name) in $smn_index:$apn_index\n"
      		  }
      		  -re "All data on volume will be destroyed. Continue(.*)" {
      			send "y\r"
      			exp_continue
      		  }
      		  -re "You are in basic. Continue(.*)" {
      			send "y\r"
      			exp_continue
      		  }
      		  timeout {
      			send_user "time out\n"
      		  }
      		}
      		
#      		send "$command2\r"
#      		expect  { 
#      		  -re "formathd /c\r(.*)Continue"  {
#      			  send "y\r"
#      			  expect {
#      			    -re "All data on volume will be destroyed. Continue(.*)" {
#      				    send "y\r"
#      				    expect {
#      				      -re "Formating Hard Disk(.*)$dollar_prompt" {
#      					    send_user "\t(cdrive_format) Formatting /c successfully done for board : $board_info(node,$smn_index,$apn_index,name) in $smn_index:$apn_index\n"
#      				      }
#      			      }
#      			    }
#      			   }
#      		  }
#      		  timeout {
#      			 send_user "time out\n"
#      		  }
#      	  }
      	}
      } else {
        if {$nongpb == "1" && [string first "No or wrong board" $board_info(node,$smn_index,$apn_index,name)] == -1} {
           set command3 "lhsh $lhsh_name format /f"
           send "$command3\r"
           expect {
           		-re "format /f\r(.*)$dollar_prompt"  {
         			  send_user "\t(fdrive_format) Format /f successfully done for board : $board_info(node,$smn_index,$apn_index,name) in $smn_index:$apn_index\n"
         		  }
         		  timeout {
         			  send_user "time out\n"
         		  }
         	 }
        }
      }
   }
}

send "exit\r"